// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

contract Project1 
{
    string public Contract_Name = "Priyanshu's Project 1";
    address public Contract_Owner;
    uint public Total_NFTs;

    // Structure to represent an NFT
    struct NFT 
    {
        uint ID;     
        string Name;    
        string Region;  
        address Owner;  
    }

    NFT[] public NFTs;

    constructor() 
    {
        Contract_Owner = msg.sender;
    }

    address Adrs;
    // Function to input address so that we can verify the owner
    function inputAdrs(address _adrs) public
    {
        Adrs = _adrs;
    }

    // Function to add a new NFT
    function addNFT(string memory name, string memory region) public 
    {
        require(msg.sender == Contract_Owner, "Only the contract owner can add NFTs");

        uint newNFT_Id = Total_NFTs + 1;  
        NFT memory newNFT = NFT(newNFT_Id, name, region, address(0));
        
        // Add the new NFT to the array
        NFTs.push(newNFT);
        Total_NFTs++;

        // Assert that the new NFT's owner is not set
        assert(NFTs[newNFT_Id - 1].Owner == address(0));
    }

    // Function to mint (assign) an NFT to a specific address
    function mintNFT(address to, uint nftId) public 
    {
        require(to != address(0), "Cannot mint to zero address");
        require(nftId > 0 && nftId <= Total_NFTs, "Invalid NFT ID");
        require(NFTs[nftId - 1].Owner == address(0), "NFT already minted");

        // Assign the NFT to the specified address
        NFTs[nftId - 1].Owner = to;

        // Assert that the NFT's owner is correctly set
        assert(NFTs[nftId - 1].Owner == to);
    }

    // Function to retrieve details of a specific NFT by its ID
    function getNFT(uint nftId) public view returns (uint, string memory, string memory, address) 
    {
        require(nftId > 0 && nftId <= Total_NFTs, "Invalid NFT ID");
        NFT memory nft = NFTs[nftId - 1];
        
        if (nft.Owner == address(0)) 
        {
            revert("NFT not found");
        }

        return (nft.ID, nft.Name, nft.Region, nft.Owner);
    }
}
